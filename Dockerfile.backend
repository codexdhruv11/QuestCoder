# Multi-stage Dockerfile for backend production deployment
# Build stage
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Copy package files
COPY backend/package*.json ./
COPY package*.json ../

# Install dependencies
RUN npm ci --only=production --ignore-scripts

# Copy source code
COPY backend/ ./
COPY tsconfig.base.json ../

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S questcoder -u 1001

# Set working directory
WORKDIR /app

# Copy package files and install production dependencies only
COPY backend/package*.json ./
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Copy built application from build stage
COPY --from=build --chown=questcoder:nodejs /app/dist ./dist
COPY --from=build --chown=questcoder:nodejs /app/node_modules ./node_modules

# Copy environment template (will be overridden in production)
COPY backend/.env.example .env

# Create necessary directories with proper permissions
RUN mkdir -p logs uploads temp && \
    chown -R questcoder:nodejs /app

# Set user
USER questcoder

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e " \
    const http = require('http'); \
    const options = { \
      host: 'localhost', \
      port: process.env.PORT || 5000, \
      path: '/api/health', \
      timeout: 2000 \
    }; \
    const request = http.request(options, (res) => { \
      console.log('Health check status:', res.statusCode); \
      process.exit(res.statusCode === 200 ? 0 : 1); \
    }); \
    request.on('error', (err) => { \
      console.error('Health check failed:', err); \
      process.exit(1); \
    }); \
    request.end();"

# Set environment
ENV NODE_ENV=production
ENV TZ=UTC

# Start the application with proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]

# Labels for better container management
LABEL maintainer="questcoder-team" \
      version="1.0.0" \
      description="QuestCoder Backend API Server" \
      org.opencontainers.image.source="https://github.com/questcoder/backend"

