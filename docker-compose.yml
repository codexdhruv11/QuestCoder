version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: questcoder-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-questcoder}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - questcoder-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: questcoder-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - questcoder-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: questcoder-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DB_NAME:-questcoder}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "5000:5000"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - questcoder-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request({host: 'localhost', port: 5000, path: '/api/health'}, res => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: questcoder-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
      VITE_SOCKET_URL: ${VITE_SOCKET_URL:-ws://localhost:5000}
    ports:
      - "3000:80"
    networks:
      - questcoder-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  questcoder-network:
    driver: bridge
    name: questcoder-network

volumes:
  mongodb_data:
    name: questcoder-mongodb-data
  mongodb_config:
    name: questcoder-mongodb-config
  redis_data:
    name: questcoder-redis-data

# Development profile with additional services
profiles:
  - dev

# Development overrides
x-development: &development
  profiles:
    - dev

# Test profile services
x-test: &test
  profiles:
    - test

# Additional development services
services-dev:
  # MongoDB Express for database management
  mongo-express:
    <<: *development
    image: mongo-express:latest
    container_name: questcoder-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS:-password}
    ports:
      - "8081:8081"
    networks:
      - questcoder-network
    depends_on:
      mongodb:
        condition: service_healthy

  # Redis Commander for cache management
  redis-commander:
    <<: *development
    image: rediscommander/redis-commander:latest
    container_name: questcoder-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis123}
    ports:
      - "8082:8081"
    networks:
      - questcoder-network
    depends_on:
      redis:
        condition: service_healthy

# Test services
services-test:
  # Test MongoDB (separate instance)
  mongodb-test:
    <<: *test
    image: mongo:6.0
    container_name: questcoder-mongodb-test
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME: test
      MONGO_INITDB_ROOT_PASSWORD: test123
      MONGO_INITDB_DATABASE: questcoder_test
    ports:
      - "27018:27017"
    volumes:
      - mongodb_test_data:/data/db
    networks:
      - questcoder-test-network
    tmpfs:
      - /tmp

  # Test Redis (separate instance)
  redis-test:
    <<: *test
    image: redis:7-alpine
    container_name: questcoder-redis-test
    restart: "no"
    command: redis-server --appendonly no
    ports:
      - "6380:6379"
    networks:
      - questcoder-test-network
    tmpfs:
      - /data

networks-test:
  questcoder-test-network:
    name: questcoder-test-network

volumes-test:
  mongodb_test_data:
    name: questcoder-mongodb-test-data





